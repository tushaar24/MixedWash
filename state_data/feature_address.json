{
  "path": "composeApp/src/commonMain/kotlin/com/mixedwash/features/address",
  "name": "Address",
  "type": "feature",
  "purpose": "Allows users to manage their delivery addresses, including adding, editing, and selecting addresses for laundry service orders.",
  "lastUpdated": {
    "date": "2025-04-01",
    "commit": "209101caec9ef7e157d1392ba29076d61a4c2a79"
  },
  "change_log": [
    {
      "commit_range": "209101caec9ef7e157d1392ba29076d61a4c2a79",
      "date": "2025-04-01",
      "summary": "Updated address feature state with detailed component structure and file organization"
    },
    {
      "commit_range": "209101caec9ef7e157d1392ba29076d61a4c2a79",
      "date": "2025-04-01",
      "summary": "Updated state file with current commit hash"
    },
    {
      "commit_range": "current_commit",
      "date": "2025-04-01",
      "summary": "Initial state capture of address feature structure and components"
    }
  ],
  "architecture": {
    "pattern": "Clean Architecture with MVVM",
    "layers": [
      {
        "name": "Data",
        "description": "Repository implementation and Firebase service for address data management, organized into repository and service packages"
      },
      {
        "name": "Domain",
        "description": "Address model, repository interface, and error handling, organized into model, repository, and error packages"
      },
      {
        "name": "Presentation",
        "description": "AddressScreen, ViewModel, and UI components for address management, with a separate components subfolder"
      },
      {
        "name": "DI",
        "description": "Dependency injection module for the address feature using Koin"
      }
    ]
  },
  "components": [
    {
      "name": "AddressRepository",
      "type": "Repository Interface",
      "purpose": "Defines operations for address management including CRUD operations",
      "path": "domain/repository/AddressRepository.kt"
    },
    {
      "name": "FirebaseAddressRepositoryImpl",
      "type": "Repository Implementation",
      "purpose": "Implements the AddressRepository interface using Firebase services",
      "path": "data/repository/FirebaseAddressRepositoryImpl.kt"
    },
    {
      "name": "FirebaseAddressService",
      "type": "Service",
      "purpose": "Provides direct interaction with Firebase for address data operations",
      "path": "data/service/FirebaseAddressService.kt"
    },
    {
      "name": "AddressScreen",
      "type": "Screen",
      "purpose": "Main UI for address management including address list and form",
      "path": "presentation/AddressScreen.kt"
    },
    {
      "name": "AddressScreenViewModel",
      "type": "ViewModel",
      "purpose": "Manages the state and business logic for the address screen",
      "path": "presentation/AddressScreenViewModel.kt"
    },
    {
      "name": "AddressScreenContract",
      "type": "State Contract",
      "purpose": "Defines the state, events, and effects for the Address screen following MVI pattern",
      "path": "presentation/AddressScreenContract.kt"
    },
    {
      "name": "AddressForm",
      "type": "UI Component",
      "purpose": "Form for adding and editing address details",
      "path": "presentation/components/AddressForm.kt"
    },
    {
      "name": "AddressList",
      "type": "UI Component",
      "purpose": "Displays the list of saved addresses with options to edit or delete",
      "path": "presentation/components/AddressList.kt"
    },
    {
      "name": "AddressSearch",
      "type": "UI Component",
      "purpose": "Allows users to search for addresses",
      "path": "presentation/components/AddressSearch.kt"
    },
    {
      "name": "Address",
      "type": "Domain Model",
      "purpose": "Represents the structure of an address with validation logic",
      "path": "domain/model/Address.kt"
    },
    {
      "name": "AddressException",
      "type": "Error Handling",
      "purpose": "Custom exceptions for address-related errors",
      "path": "domain/error/AddressException.kt"
    },
    {
      "name": "ErrorExtensions",
      "type": "Utility",
      "purpose": "Extension functions for error handling",
      "path": "domain/error/Extensions.kt"
    },
    {
      "name": "AddressModule",
      "type": "DI Module",
      "purpose": "Koin module for dependency injection of address feature components",
      "path": "di/AddressModule.kt"
    }
  ],
  "dependencies": [
    {
      "name": "Koin",
      "type": "external",
      "purpose": "Dependency injection for address feature components"
    },
    {
      "name": "Compose",
      "type": "external",
      "purpose": "UI implementation for address screen and components"
    },
    {
      "name": "Firebase Firestore",
      "type": "external",
      "purpose": "Storage and retrieval of user addresses"
    },
    {
      "name": "UserService",
      "type": "internal",
      "purpose": "Accessing user-specific data for address management"
    }
  ],
  "integrationPoints": [
    {
      "name": "Booking Flow",
      "description": "Integrates with the booking flow to select delivery address"
    },
    {
      "name": "User Profile",
      "description": "Integrates with user profile for managing saved addresses"
    }
  ],
  "userFlows": [
    {
      "name": "Address Management",
      "steps": [
        "User navigates to address management screen",
        "User can view list of saved addresses",
        "User can add new addresses with form validation",
        "User can edit or delete existing addresses"
      ]
    },
    {
      "name": "Address Selection",
      "steps": [
        "User selects an address during checkout process",
        "User can choose to use a saved address or add a new one"
      ]
    }
  ],
  "manipulationRules": [
    "Ensure address validation follows consistent rules across the application",
    "Handle Firebase operation errors gracefully with appropriate user feedback",
    "Maintain user-specific address privacy by properly scoping data access",
    "Use optimistic UI updates for better user experience during CRUD operations"
  ]
}